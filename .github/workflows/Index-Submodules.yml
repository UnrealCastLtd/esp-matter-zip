name: Zip Submodules Sequentially (Fixed)

on:
  workflow_dispatch:

jobs:
  zip_submodules:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Checkout Main Repository
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Install P7zip
        run: sudo apt-get update && sudo apt-get install -y p7zip-full

      - name: Create Zipped-Code directory
        run: mkdir -p Zipped-Code/

      - name: Index All Submodules
        id: index_submodules
        run: |
          # Use 'git submodule status --recursive' to create a list of all submodules.
          git submodule status --recursive > submodules_list.txt

      - name: Process, Zip, and Push Each Submodule
        run: |
          while read -r line; do
            # Extract path and URL for the submodule
            SUBMODULE_PATH=$(echo "$line" | awk '{print $2}')
            SUBMODULE_URL=$(git config --file .gitmodules submodule."$SUBMODULE_PATH".url)
            
            SUBMODULE_ZIP_DIR="Zipped-Code/$(dirname "$SUBMODULE_PATH")"
            SUBMODULE_NAME=$(basename "$SUBMODULE_PATH")
            SUBMODULE_ZIP_NAME="$SUBMODULE_ZIP_DIR/$SUBMODULE_NAME.zip"
            SUBMODULE_LOG_NAME="$SUBMODULE_ZIP_DIR/$SUBMODULE_NAME.log"
            
            echo "::group::Processing $SUBMODULE_PATH"
            
            # Check if zip already exists.
            if git ls-files --error-unmatch --Z "$SUBMODULE_ZIP_NAME" > /dev/null 2>&1; then
              echo "Skipping already existing zip for $SUBMODULE_PATH"
              echo "::endgroup::"
              continue
            fi

            # Create a temporary directory for the submodule clone to prevent conflicts.
            TEMP_SUBMODULE_DIR="temp_clone/$SUBMODULE_PATH"
            mkdir -p "$TEMP_SUBMODULE_DIR"
            
            echo "Cloning submodule: $SUBMODULE_PATH"
            
            # Clone only the current submodule into the temp directory.
            git clone --no-checkout "$SUBMODULE_URL" "$TEMP_SUBMODULE_DIR"
            
            # Change to the temporary directory to checkout and remove .git
            cd "$TEMP_SUBMODULE_DIR"
            git checkout .
            rm -rf .git
            
            # Move back to the main repository's root.
            cd "$GITHUB_WORKSPACE"
            
            echo "Zipping and creating log for $SUBMODULE_PATH"
            
            # Create the destination directory for the zip and log file.
            mkdir -p "$SUBMODULE_ZIP_DIR"
            
            # Zip the temporary cloned directory.
            7z a "$SUBMODULE_ZIP_NAME" "$TEMP_SUBMODULE_DIR" -v2000m -r -x!*/.git* > "$SUBMODULE_LOG_NAME" 2>&1
            
            echo "Committing and pushing files for $SUBMODULE_PATH"
            
            # Stage the new files and commit them.
            git add "$SUBMODULE_ZIP_NAME" "$SUBMODULE_LOG_NAME"
            git commit -m "Add zip and log for submodule: $SUBMODULE_PATH"
            git push

            echo "Cleaning up local files for $SUBMODULE_PATH"
            
            # Delete the temporary cloned submodule.
            rm -rf "temp_clone"

            echo "::endgroup::"
          done < submodules_list.txt
          
