name: Zip Submodules

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  zip-and-move:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Verify submodules.txt exists
        run: |
          if [ ! -f "Zipped-Code/submodules.txt" ]; then
            echo "Error: The file Zipped-Code/submodules.txt was not found."
            exit 1
          fi

      - name: Set up and run script
        run: |
          # Create the main directory for zipped files
          mkdir -p Zipped-Code

          # Read submodules.txt
          while IFS= read -r line; do
            if [[ "$line" =~ \[submodule\ \"(.*)\"\] ]]; then
              module_name="${BASH_REMATCH[1]}"

              # Read path, url, and folder lines
              read -r path_line
              path=$(echo "$path_line" | sed -e 's/^[[:space:]]*path[[:space:]]*=[[:space:]]*//')
              read -r url_line
              url=$(echo "$url_line" | sed -e 's/^[[:space:]]*url[[:space:]]*=[[:space:]]*//')

              # Read optional branch and folder lines
              read -r branch_or_folder_line
              branch=""
              if [[ "$branch_or_folder_line" =~ "branch" ]]; then
                branch=$(echo "$branch_or_folder_line" | sed -e 's/^[[:space:]]*branch[[:space:]]*=[[:space:]]*//')
                read -r folder_line
                folder=$(echo "$folder_line" | sed -e 's/^[[:space:]]*Folder[[:space:]]*=[[:space:]]*//')
              else
                folder=$(echo "$branch_or_folder_line" | sed -e 's/^[[:space:]]*Folder[[:space:]]*=[[:space:]]*//')
              fi

              echo "ðŸ“¦ Processing submodule: $module_name"
              echo "    Path: $path"
              echo "    URL: $url"
              echo "    Branch: ${branch:-default}"
              echo "    Destination Folder: $folder"

              temp_dir="temp_clone"
              rm -rf "$temp_dir"

              # Clone branch if it exists, otherwise fallback to default branch
              if [ -n "$branch" ]; then
                if git ls-remote --heads "$url" "$branch" | grep -q "$branch"; then
                  git clone --depth 1 --branch "$branch" "$url" "$temp_dir"
                else
                  echo "Warning: Branch '$branch' not found, cloning default branch instead."
                  git clone --depth 1 "$url" "$temp_dir"
                fi
              else
                git clone --depth 1 "$url" "$temp_dir"
              fi

              # Verify clone succeeded
              if [ ! -d "$temp_dir" ]; then
                echo "Error: git clone failed for $url"
                exit 1
              fi

              # Zip the module contents (exclude .git folder)
              temp_zip_file="temp_zip_file_$(date +%s).zip"
              zip -r "$temp_zip_file" "$temp_dir" -x "*.git*" > /dev/null

              # Create destination folder
              mkdir -p "$folder"

              # Move zip file to destination
              mv "$temp_zip_file" "$folder/$(basename "$module_name").zip"

              # Clean up
              rm -rf "$temp_dir"

              echo "âœ… Successfully zipped $module_name"
              echo "---------------------------------------"
            fi
          done < Zipped-Code/submodules.txt

      - name: Upload Zipped Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zipped-submodules
          path: Zipped-Code/
