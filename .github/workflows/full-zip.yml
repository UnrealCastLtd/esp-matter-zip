name: Zip Submodules

on:
  workflow_dispatch:

jobs:
  zip_submodules:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: true  # This is crucial for checking out the submodules

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y p7zip-full  # p7zip for splitting archives

      - name: Create Zipped-Code directory
        run: |
          mkdir -p Zipped-Code/
          git status

      - name: Find and Zip Submodules
        id: zip_submodules
        run: |
          # Use find to locate all .git files which indicate submodule roots
          # The -print0 and xargs -0 are for handling filenames with spaces
          find . -type f -name ".git" -print0 | while IFS= read -r -d '' git_file; do
            # Get the path to the submodule directory
            SUBMODULE_DIR=$(dirname "$git_file")
            
            # Skip the root repository's .git file
            if [ "$SUBMODULE_DIR" == "." ]; then
              continue
            fi
            
            # The name of the zip file will be based on the submodule's path
            SUBMODULE_ZIP_NAME="Zipped-Code/$(echo "$SUBMODULE_DIR" | sed 's/\.\///g').zip"
            
            # Check if the zip file already exists in the Zipped-Code/ folder
            if git ls-files --error-unmatch --Z Zipped-Code/"$(echo "$SUBMODULE_DIR" | sed 's/\.\///g').zip" > /dev/null 2>&1; then
              echo "Skipping already existing zip for $SUBMODULE_DIR"
              continue
            fi

            echo "Processing submodule: $SUBMODULE_DIR"

            # Check if a zip already exists locally from a previous step
            if [ -f "$SUBMODULE_ZIP_NAME" ]; then
              echo "Local zip already exists, skipping: $SUBMODULE_DIR"
              continue
            fi

            # Create a log file for the zip command's output
            LOG_FILE="Zipped-Code/$(echo "$SUBMODULE_DIR" | sed 's/\.\///g').log"

            # Use 7z to create a split archive (2GB chunks)
            # The 'x' option extracts, and we are using it to create a new archive by piping
            # The -v2000m flag splits the archive into 2GB chunks
            # We exclude the .git files and sub-submodule directories
            7z a "$SUBMODULE_ZIP_NAME" "$SUBMODULE_DIR" -v2000m -r -x!*/.git* > "$LOG_FILE" 2>&1

            # Commit and push the created zip and log files
            git add "$SUBMODULE_ZIP_NAME" "$LOG_FILE"
            git commit -m "Add zip and log for submodule: $SUBMODULE_DIR"
            git push

            # Clean up the temporary folder to save disk space
            # We remove the submodule folder to avoid re-zipping and to free up space
            rm -rf "$SUBMODULE_DIR"
          done
          
