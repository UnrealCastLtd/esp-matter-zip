name: Recursive Submodule Zips and Push to Repo

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          submodules: false

      - name: Install zip and git
        run: sudo apt update && sudo apt install -y zip git

      - name: Recursive zip and push
        run: |
          set -e
          ZIP_SIZE_LIMIT="2g"
          ZIP_FOLDER="Zipped-Code"
          REPO_ROOT=$(pwd)
          mkdir -p "$ZIP_FOLDER"

          zip_submodule() {
              local url="$1"
              local name="$2"
              local parent="$3"
              local out_folder="$parent/$name"

              # Full path for zip/log in repo
              zip_path="$REPO_ROOT/$ZIP_FOLDER/$out_folder/$name.zip"
              log_path="$REPO_ROOT/$ZIP_FOLDER/$out_folder/$name.log"

              # Skip if zip already exists
              if [ -f "$zip_path" ]; then
                  echo "‚è≠ Zip already exists: $zip_path, skipping."
                  return
              fi

              # Make sure the folder exists
              mkdir -p "$(dirname "$zip_path")"

              # Safe temp folder
              temp_dir="temp_clone_$(echo "$name" | tr '/' '_')"

              echo "üì¶ Cloning $url -> $name"
              git clone --depth 1 "$url" "$temp_dir"
              cd "$temp_dir"

              # Nested submodules
              if [ -f ".gitmodules" ]; then
                  nested_submodules=$(git config --file .gitmodules --get-regexp path | awk '{print $2}')
              else
                  nested_submodules=""
              fi

              # Exclude nested submodules from zip
              exclude=""
              for sm in $nested_submodules; do
                  exclude="$exclude --exclude=$sm/*"
              done

              # Zip current module
              zip -r -s $ZIP_SIZE_LIMIT "$zip_path" . $exclude > "$log_path" 2>&1 && \
                  echo "‚úÖ Zipped $name" || echo "‚ùå Failed $name, see $log_path"

              cd ..
              rm -rf "$temp_dir"

              # Commit and push immediately
              git config user.name "github-actions"
              git config user.email "actions@github.com"
              git add "$ZIP_FOLDER/$out_folder/$name.zip" "$ZIP_FOLDER/$out_folder/$name.log"
              git commit -m "Add zip for $name" || echo "No changes to commit"
              git push origin main || echo "Push failed (possibly large file)"

              # Recurse into nested submodules
              for sm in $nested_submodules; do
                  sm_url=$(git config --file "$temp_dir/.gitmodules" --get "submodule.$sm.url" || true)
                  if [ -n "$sm_url" ]; then
                      zip_submodule "$sm_url" "$sm" "$out_folder"
                  fi
              done
          }

          MAIN_REPO_URL="https://github.com/UnrealCastLtd/esp-matter-zip.git"
          zip_submodule "$MAIN_REPO_URL" "esp-matter" "."
