name: Recursive Submodule Zips (Clone & Zip One-by-One)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      # Step 1: Checkout the main repo shallow (no submodules)
      - name: Checkout main repo
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 1

      # Step 2: Install dependencies
      - name: Install zip and git
        run: sudo apt update && sudo apt install -y zip git

      # Step 3: Recursive clone + zip script
      - name: Clone and zip submodules one by one
        run: |
          set -e
          OUTPUT_DIR="recursive_zips"
          ZIP_SIZE_LIMIT="2g"
          mkdir -p "$OUTPUT_DIR"

          zip_submodule() {
              local url="$1"
              local name="$2"
              local parent="$3"
              local out_folder="$parent/$name"
              mkdir -p "$out_folder"

              echo "üì¶ Cloning $url -> $name"
              git clone --depth 1 "$url" temp_clone
              cd temp_clone

              # Check for nested submodules
              if [ -f ".gitmodules" ]; then
                  submodules=$(git config --file .gitmodules --get-regexp path | awk '{print $2}')
              else
                  submodules=""
              fi

              # Zip current folder (submodule) with split
              zip -r -s $ZIP_SIZE_LIMIT "../$out_folder/$name.zip" . > "../$out_folder/$name.log" 2>&1 && \
                echo "‚úÖ Zipped $name" || echo "‚ùå Failed $name, see ../$out_folder/$name.log"

              cd ..
              rm -rf temp_clone

              # Recursively handle nested submodules
              for sm in $submodules; do
                  sm_url=$(git config --file "$out_folder/$sm/.gitmodules" --get "submodule.$sm.url" || true)
                  if [ -n "$sm_url" ]; then
                      zip_submodule "$sm_url" "$sm" "$out_folder"
                  fi
              done
          }

          # --- Start from your fork ---
          MAIN_REPO_URL="https://github.com/UnrealCastLtd/esp-matter-zip.git"
          zip_submodule "$MAIN_REPO_URL" "esp-matter" "$OUTPUT_DIR"

      # Step 4: Upload all zips as artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: recursive-submodule-zips
          path: recursive_zips
