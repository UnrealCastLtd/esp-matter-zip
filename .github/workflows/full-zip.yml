name: Zip Submodules Sequentially (Two-Pass)

on:
  workflow_dispatch:

jobs:
  zip_submodules:
    runs-on: ubuntu-latest
    timeout-minutes: 360 # Increased timeout for large repos

    steps:
      - name: Checkout Main Repository
        uses: actions/checkout@v4
        with:
          submodules: false # Do not clone submodules yet
          fetch-depth: 0    # Fetch all history to list all submodules

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Install P7zip
        run: sudo apt-get update && sudo apt-get install -y p7zip-full

      - name: Create Zipped-Code directory
        run: mkdir -p Zipped-Code/

      - name: Index All Submodules
        id: index_submodules
        run: |
          # Use 'git submodule status --recursive' to index all submodule paths.
          # This is the "indexing" step, which is fast and uses no disk space.
          git submodule status --recursive > submodules_list.txt

      - name: Process, Zip, and Push Each Submodule
        run: |
          # Read the list of submodule paths from the file and process each one sequentially.
          while read -r line; do
            SUBMODULE_PATH=$(echo "$line" | awk '{print $2}')
            
            SUBMODULE_ZIP_DIR="Zipped-Code/$(dirname "$SUBMODULE_PATH")"
            SUBMODULE_NAME=$(basename "$SUBMODULE_PATH")
            SUBMODULE_ZIP_NAME="$SUBMODULE_ZIP_DIR/$SUBMODULE_NAME.zip"
            SUBMODULE_LOG_NAME="$SUBMODULE_ZIP_DIR/$SUBMODULE_NAME.log"
            
            echo "::group::Processing $SUBMODULE_PATH"
            
            # Check if the zip file already exists in the main repo.
            if git ls-files --error-unmatch --Z "$SUBMODULE_ZIP_NAME" > /dev/null 2>&1; then
              echo "Skipping already existing zip for $SUBMODULE_PATH"
              echo "::endgroup::"
              continue
            fi
            
            echo "Cloning submodule: $SUBMODULE_PATH"
            
            # Clone only the specific submodule, but not recursively.
            git submodule update --init -- "$SUBMODULE_PATH"
            
            # This is the crucial part: we are now guaranteed that only this submodule
            # is cloned, and we can proceed to zip it.
            
            echo "Zipping and creating log for $SUBMODULE_PATH"
            
            # Create the directory structure for the zip and log files if it doesn't exist.
            mkdir -p "$GITHUB_WORKSPACE/$SUBMODULE_ZIP_DIR"
            
            # Change into the submodule's directory to perform the zipping.
            cd "$SUBMODULE_PATH"
            
            # Zip the submodule's content.
            7z a "$GITHUB_WORKSPACE/$SUBMODULE_ZIP_NAME" . -v2000m -r -x!*/.git* > "$GITHUB_WORKSPACE/$SUBMODULE_LOG_NAME" 2>&1
            
            # Move back to the main repository's root.
            cd "$GITHUB_WORKSPACE"
            
            echo "Committing and pushing files for $SUBMODULE_PATH"
            git add "$SUBMODULE_ZIP_NAME" "$SUBMODULE_LOG_NAME"
            git commit -m "Add zip and log for submodule: $SUBMODULE_PATH"
            git push
            
            echo "Cleaning up local files for $SUBMODULE_PATH"
            
            # Delete the temporary cloned submodule to free up disk space.
            rm -rf "$SUBMODULE_PATH"
            
            echo "::endgroup::"
          done < submodules_list.txt
          
