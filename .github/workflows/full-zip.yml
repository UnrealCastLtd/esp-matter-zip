name: Recursive Submodule Zips (Clone & Zip One-by-One)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      # Step 1: Install dependencies
      - name: Install zip and git
        run: sudo apt update && sudo apt install -y zip git

      # Step 2: Recursive clone + zip script
      - name: Clone and zip submodules one by one
        run: |
          set -e
          OUTPUT_DIR="recursive_zips"
          ZIP_SIZE_LIMIT="2g"
          mkdir -p "$OUTPUT_DIR"

          zip_submodule() {
              local url="$1"
              local name="$2"
              local parent="$3"
              local out_folder="$parent/$name"

              # Ensure full output folder exists
              mkdir -p "$out_folder"

              # Safe temp folder name
              local temp_dir="temp_clone_$(echo "$name" | tr '/' '_')"

              echo "üì¶ Cloning $url -> $name"
              git clone --depth 1 "$url" "$temp_dir"
              cd "$temp_dir"

              # Nested submodules in this repo
              if [ -f ".gitmodules" ]; then
                  nested_submodules=$(git config --file .gitmodules --get-regexp path | awk '{print $2}')
              else
                  nested_submodules=""
              fi

              # Exclude nested submodules from current zip
              exclude=""
              for sm in $nested_submodules; do
                  exclude="$exclude --exclude=$sm/*"
              done

              # Prepare paths
              zip_path="../$out_folder/$name.zip"
              log_path="../$out_folder/$name.log"
              mkdir -p "$(dirname "$zip_path")"

              # Zip current module
              zip -r -s $ZIP_SIZE_LIMIT "$zip_path" . $exclude > "$log_path" 2>&1 && \
                echo "‚úÖ Zipped $name" || echo "‚ùå Failed $name, see $log_path"

              # Recursively process nested submodules
              for sm in $nested_submodules; do
                  sm_url=$(git config --file .gitmodules --get "submodule.$sm.url" || true)
                  if [ -n "$sm_url" ]; then
                      zip_submodule "$sm_url" "$sm" "$out_folder"
                  fi
              done

              # Cleanup temp folder
              cd ..
              rm -rf "$temp_dir"
          }

          # --- Start from your fork ---
          MAIN_REPO_URL="https://github.com/UnrealCastLtd/esp-matter-zip.git"
          zip_submodule "$MAIN_REPO_URL" "esp-matter" "$OUTPUT_DIR"

      # Step 3: Upload all zips as artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: recursive-submodule-zips
          path: recursive_zips
