name: Zip Submodules Sequentially

on:
  workflow_dispatch:

jobs:
  zip_submodules:
    runs-on: ubuntu-latest

    steps:
      - name: Configure Git and Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: false  # Do not checkout submodules initially
      
      - name: Set up Git credentials
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Install P7zip
        run: sudo apt-get update && sudo apt-get install -y p7zip-full

      - name: Create Zipped-Code directory
        run: mkdir -p Zipped-Code/

      - name: Recursively Find and Zip Submodules
        run: |
          # Use 'git ls-files -s --exclude-standard' to find all files in the repo, including those in submodules
          # We'll use a unique identifier to handle both top-level and nested submodules
          # The while loop processes each submodule one by one
          git submodule foreach --recursive '
            SUBMODULE_PATH="$sm_path"
            SUBMODULE_NAME=$(basename "$sm_path")
            
            # The path for the zipped file and log will mirror the submodule's path
            SUBMODULE_ZIP_DIR="Zipped-Code/$(dirname "$SUBMODULE_PATH")"
            SUBMODULE_ZIP_NAME="$SUBMODULE_ZIP_DIR/$SUBMODULE_NAME.zip"
            SUBMODULE_LOG_NAME="$SUBMODULE_ZIP_DIR/$SUBMODULE_NAME.log"

            # Check if the zip file already exists in the repo
            if git ls-files --error-unmatch --Z "$SUBMODULE_ZIP_NAME" > /dev/null 2>&1; then
              echo "Skipping already existing zip for $SUBMODULE_PATH"
              continue
            fi

            echo "Processing submodule: $SUBMODULE_PATH"
            
            # Create the directory structure for the zip and log files if it doesn't exist
            mkdir -p "$SUBMODULE_ZIP_DIR"
            
            # Clone only the current submodule (already handled by 'git submodule foreach') and zip it
            # We are inside the submodule directory, so '7z a' will zip the current folder
            # The -v2000m flag splits the archive into 2GB chunks
            7z a "$SUBMODULE_ZIP_NAME" . -v2000m -r -x!*/.git* > "$SUBMODULE_LOG_NAME" 2>&1

            # Go back to the root of the repo to commit and push
            cd "$GITHUB_WORKSPACE"
            
            # Commit and push the created zip and log files
            git add "$SUBMODULE_ZIP_NAME" "$SUBMODULE_LOG_NAME"
            git commit -m "Add zip and log for submodule: $SUBMODULE_PATH"
            git push

            # Clean up the temporary cloned submodule directory to save space
            rm -rf "$SUBMODULE_PATH"
          '
          
